{
  "info": {
    "name": "MoneyMosaic API Collection",
    "description": "Complete API testing collection for MoneyMosaic personal finance application with Plaid integration - Updated for current backend structure",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "moneymosaic-api-2025"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "managementUrl",
      "value": "http://localhost:3000/api/management",
      "type": "string"
    },
    {
      "key": "link_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "public_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "institution_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Authentication & Setup",
      "item": [
        {
          "name": "Create Link Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has link_token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('link_token');",
                  "    pm.collectionVariables.set('link_token', jsonData.link_token);",
                  "});",
                  "",
                  "pm.test(\"Link token is valid format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.link_token).to.be.a('string');",
                  "    pm.expect(jsonData.link_token.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/create_link_token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "create_link_token"
              ]
            }
          }
        },
        {
          "name": "Create Sandbox Public Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has public_token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('public_token');",
                  "    pm.collectionVariables.set('public_token', jsonData.public_token);",
                  "});",
                  "",
                  "pm.test(\"Public token is valid format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.public_token).to.be.a('string');",
                  "    pm.expect(jsonData.public_token.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"institution_id\": \"ins_109508\",\n    \"initial_products\": [\"transactions\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sandbox/public_token/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sandbox",
                "public_token",
                "create"
              ]
            }
          }
        },
        {
          "name": "Exchange Public Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access_token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.collectionVariables.set('access_token', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test(\"Response has item_id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('item_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"public_token\": \"{{public_token}}\",\n    \"institution\": {\n        \"institution_id\": \"ins_109508\",\n        \"name\": \"First Platypus Bank\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/exchange_public_token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "exchange_public_token"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "2. Bank Management",
      "item": [
        {
          "name": "Get Connected Banks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has banks array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('banks');",
                  "    pm.expect(jsonData.banks).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each bank has required properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.banks.length > 0) {",
                  "        const bank = jsonData.banks[0];",
                  "        pm.expect(bank).to.have.property('id');",
                  "        pm.expect(bank).to.have.property('name');",
                  "        pm.expect(bank).to.have.property('institution_id');",
                  "        pm.collectionVariables.set('institution_id', bank.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{managementUrl}}/connected_banks",
              "host": [
                "{{managementUrl}}"
              ],
              "path": [
                "connected_banks"
              ]
            }
          }
        },
        {
          "name": "Check Connection Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has health arrays\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('healthy');",
                  "    pm.expect(jsonData).to.have.property('unhealthy');",
                  "    pm.expect(jsonData.healthy).to.be.an('array');",
                  "    pm.expect(jsonData.unhealthy).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{managementUrl}}/health_check",
              "host": [
                "{{managementUrl}}"
              ],
              "path": [
                "health_check"
              ]
            }
          }
        },
        {
          "name": "Get Scheduler Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{managementUrl}}/scheduler_status",
              "host": [
                "{{managementUrl}}"
              ],
              "path": [
                "scheduler_status"
              ]
            }
          }
        },
        {
          "name": "Fetch Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has transactions\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transactions');",
                  "    pm.expect(jsonData.transactions).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response has summary\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('summary');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"days\": 30\n}"
            },
            "url": {
              "raw": "{{managementUrl}}/fetch",
              "host": [
                "{{managementUrl}}"
              ],
              "path": [
                "fetch"
              ]
            }
          }
        },
        {
          "name": "Manual Sync",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response has message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{managementUrl}}/sync",
              "host": [
                "{{managementUrl}}"
              ],
              "path": [
                "sync"
              ]
            }
          }
        },
        {
          "name": "Remove Bank Connection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{managementUrl}}/banks/{{institution_id}}",
              "host": [
                "{{managementUrl}}"
              ],
              "path": [
                "banks",
                "{{institution_id}}"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "3. Dashboard Data",
      "item": [
        {
          "name": "Get Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has all overview fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalCashBalance');",
                  "    pm.expect(jsonData).to.have.property('totalPortfolioValue');",
                  "    pm.expect(jsonData).to.have.property('netWorth');",
                  "    pm.expect(jsonData).to.have.property('todayNetFlow');",
                  "});",
                  "",
                  "pm.test(\"Numeric values are correct type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.totalCashBalance).to.be.a('number');",
                  "    pm.expect(jsonData.totalPortfolioValue).to.be.a('number');",
                  "    pm.expect(jsonData.netWorth).to.be.a('number');",
                  "    pm.expect(jsonData.todayNetFlow).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/overview",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "overview"
              ]
            }
          }
        },
        {
          "name": "Get Earnings Summary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has earnings fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('todayNetFlow');",
                  "    pm.expect(jsonData).to.have.property('monthToDateNetFlow');",
                  "    pm.expect(jsonData).to.have.property('sevenDayAverage');",
                  "});",
                  "",
                  "pm.test(\"Earnings values are numeric\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.todayNetFlow).to.be.a('number');",
                  "    pm.expect(jsonData.monthToDateNetFlow).to.be.a('number');",
                  "    pm.expect(jsonData.sevenDayAverage).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/earnings",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "earnings"
              ]
            }
          }
        },
        {
          "name": "Get Spending Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Spending data has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const item = jsonData[0];",
                  "        pm.expect(item).to.have.property('date');",
                  "        pm.expect(item).to.have.property('spending');",
                  "        pm.expect(item).to.have.property('income');",
                  "        pm.expect(item.spending).to.be.a('number');",
                  "        pm.expect(item.income).to.be.a('number');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/spending-data?range=30",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spending-data"
              ],
              "query": [
                {
                  "key": "range",
                  "value": "30"
                }
              ]
            }
          }
        },
        {
          "name": "Get Category Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Category data has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const item = jsonData[0];",
                  "        pm.expect(item).to.have.property('category');",
                  "        pm.expect(item).to.have.property('amount');",
                  "        pm.expect(item).to.have.property('percentage');",
                  "        pm.expect(item.amount).to.be.a('number');",
                  "        pm.expect(item.percentage).to.be.a('number');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/category-data?range=30",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "category-data"
              ],
              "query": [
                {
                  "key": "range",
                  "value": "30"
                }
              ]
            }
          }
        },
        {
          "name": "Get Categories List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array of strings\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.be.a('string');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories"
              ]
            }
          }
        },
        {
          "name": "Get Investments",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Investments array is empty (expected)\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.lengthOf(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/investments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "investments"
              ]
            }
          }
        },
        {
          "name": "Get Transactions (Paginated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transactions');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('page');",
                  "    pm.expect(jsonData).to.have.property('limit');",
                  "    pm.expect(jsonData).to.have.property('totalPages');",
                  "});",
                  "",
                  "pm.test(\"Transactions is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.transactions).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Pagination values are correct type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total).to.be.a('number');",
                  "    pm.expect(jsonData.page).to.be.a('number');",
                  "    pm.expect(jsonData.limit).to.be.a('number');",
                  "    pm.expect(jsonData.totalPages).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions?page=1&limit=20&range=30",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "transactions"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "range",
                  "value": "30"
                }
              ]
            }
          }
        },
        {
          "name": "Get Transactions (Filtered)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transactions');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('page');",
                  "    pm.expect(jsonData).to.have.property('limit');",
                  "    pm.expect(jsonData).to.have.property('totalPages');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions?page=1&limit=10&range=30&categories=Food and Drink,Transportation&search=restaurant",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "transactions"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "range",
                  "value": "30"
                },
                {
                  "key": "categories",
                  "value": "Food and Drink,Transportation"
                },
                {
                  "key": "search",
                  "value": "restaurant"
                }
              ]
            }
          }
        },
        {
          "name": "Get Accounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Account data has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const account = jsonData[0];",
                  "        pm.expect(account).to.have.property('id');",
                  "        pm.expect(account).to.have.property('name');",
                  "        pm.expect(account).to.have.property('type');",
                  "        pm.expect(account).to.have.property('balance');",
                  "        pm.expect(account).to.have.property('lastUpdated');",
                  "        pm.expect(account.balance).to.be.a('number');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/accounts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "accounts"
              ]
            }
          }
        }
      ]
    }
  ]
}
